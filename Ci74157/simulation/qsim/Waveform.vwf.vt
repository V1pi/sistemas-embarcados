// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/29/2022 11:58:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Ci74157
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Ci74157_vlg_vec_tst();
// constants                                           
// general purpose registers
reg 2;
reg 3;
reg 5;
reg 6;
reg 10;
reg 11;
reg 13;
reg 14;
reg E;
reg S;
// wires                                               
wire 4;
wire 7;
wire 9;
wire 12;

// assign statements (if any)                          
Ci74157 i1 (
// port map - connection between master ports and signals/registers   
	.\2 (2),
	.\3 (3),
	.\4 (4),
	.\5 (5),
	.\6 (6),
	.\7 (7),
	.\9 (9),
	.\10 (10),
	.\11 (11),
	.\12 (12),
	.\13 (13),
	.\14 (14),
	.E(E),
	.S(S)
);
initial 
begin 
#1000000 $finish;
end 

// 2
initial
begin
	2 = 1'bX;
	2 = #30000 1'b0;
	2 = #10000 1'b1;
	2 = #10000 1'b0;
end 

// 3
initial
begin
	3 = 1'bX;
	3 = #10000 1'b0;
	3 = #10000 1'b1;
	3 = #10000 1'bX;
	3 = #20000 1'b0;
end 

// 5
initial
begin
	5 = 1'bX;
	5 = #30000 1'b0;
	5 = #10000 1'b1;
	5 = #10000 1'b0;
end 

// 6
initial
begin
	6 = 1'bX;
	6 = #10000 1'b0;
	6 = #10000 1'b1;
	6 = #10000 1'bX;
	6 = #20000 1'b0;
end 

// 10
initial
begin
	10 = 1'bX;
	10 = #30000 1'b0;
	10 = #10000 1'b1;
	10 = #10000 1'b0;
end 

// 11
initial
begin
	11 = 1'bX;
	11 = #10000 1'b0;
	11 = #10000 1'b1;
	11 = #10000 1'bX;
	11 = #20000 1'b0;
end 

// 13
initial
begin
	13 = 1'bX;
	13 = #30000 1'b0;
	13 = #10000 1'b1;
	13 = #10000 1'b0;
end 

// 14
initial
begin
	14 = 1'bX;
	14 = #10000 1'b0;
	14 = #10000 1'b1;
	14 = #10000 1'bX;
	14 = #20000 1'b0;
end 

// E
initial
begin
	E = 1'b1;
	E = #10000 1'b0;
end 

// S
initial
begin
	S = 1'bX;
	S = #10000 1'b1;
	S = #20000 1'b0;
end 
endmodule

