// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/29/2022 12:07:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Ci74157
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Ci74157_vlg_vec_tst();
// constants                                           
// general purpose registers
reg E;
reg i0a;
reg i0b;
reg i0c;
reg i0d;
reg i1a;
reg i1b;
reg i1c;
reg i1d;
reg S;
// wires                                               
wire Za;
wire Zb;
wire Zc;
wire Zd;

// assign statements (if any)                          
Ci74157 i1 (
// port map - connection between master ports and signals/registers   
	.E(E),
	.i0a(i0a),
	.i0b(i0b),
	.i0c(i0c),
	.i0d(i0d),
	.i1a(i1a),
	.i1b(i1b),
	.i1c(i1c),
	.i1d(i1d),
	.S(S),
	.Za(Za),
	.Zb(Zb),
	.Zc(Zc),
	.Zd(Zd)
);
initial 
begin 
#1000000 $finish;
end 

// E
initial
begin
	E = 1'b1;
	E = #10000 1'b0;
end 

// i0a
initial
begin
	i0a = 1'bX;
	i0a = #30000 1'b0;
	i0a = #10000 1'b1;
	i0a = #10000 1'b0;
end 

// i0b
initial
begin
	i0b = 1'bX;
	i0b = #30000 1'b0;
	i0b = #10000 1'b1;
	i0b = #10000 1'b0;
end 

// i0c
initial
begin
	i0c = 1'bX;
	i0c = #30000 1'b0;
	i0c = #10000 1'b1;
	i0c = #10000 1'b0;
end 

// i0d
initial
begin
	i0d = 1'bX;
	i0d = #30000 1'b0;
	i0d = #10000 1'b1;
	i0d = #10000 1'b0;
end 

// i1a
initial
begin
	i1a = 1'bX;
	i1a = #10000 1'b0;
	i1a = #10000 1'b1;
	i1a = #10000 1'bX;
	i1a = #20000 1'b0;
end 

// i1b
initial
begin
	i1b = 1'bX;
	i1b = #10000 1'b0;
	i1b = #10000 1'b1;
	i1b = #10000 1'bX;
	i1b = #20000 1'b0;
end 

// i1c
initial
begin
	i1c = 1'bX;
	i1c = #10000 1'b0;
	i1c = #10000 1'b1;
	i1c = #10000 1'bX;
	i1c = #20000 1'b0;
end 

// i1d
initial
begin
	i1d = 1'bX;
	i1d = #10000 1'b0;
	i1d = #10000 1'b1;
	i1d = #10000 1'bX;
	i1d = #20000 1'b0;
end 

// S
initial
begin
	S = 1'bX;
	S = #10000 1'b1;
	S = #20000 1'b0;
end 
endmodule

